#ifndef KHTTP_H_SADFLKJASDLFKJA455ss
#define KHTTP_H_SADFLKJASDLFKJA455ss
#include "kfeature.h"
#cmakedefine HTTP_PROXY
#cmakedefine ENABLE_HTTP2

#ifdef KSOCKET_SSL
#define ENABLE_UPSTREAM_SSL   1
#cmakedefine ENABLE_HTTP3
#endif

#ifdef ENABLE_HTTP2
#define ENABLE_UPSTREAM_HTTP2 1
#endif

#define MAX_HTTP_HEAD_SIZE	4194304
#define IF_FREE(p) {if ( p ) xfree(p);p=NULL;}

#define KGL_MAX_UINT32_VALUE  (uint32_t) 0xffffffff
#define KGL_MAX_INT32_VALUE   (uint32_t) 0x7fffffff

#define KGL_INT32_LEN      (sizeof("-2147483648") - 1)
#define KGL_INT64_LEN      (sizeof("-9223372036854775808") - 1)
#define KGL_1123_TIME_LEN  (sizeof("Sun, 21 Oct 2018 12:16:24 GMT")-1)
#define kgl_tolower(c)      (u_char) ((c >= 'A' && c <= 'Z') ? (c | 0x20) : c)
#define kgl_toupper(c)      (u_char) ((c >= 'a' && c <= 'z') ? (c & ~0x20) : c)
#define STATUS_OK               200
#define STATUS_CREATED          201
#define STATUS_NO_CONTENT       204
#define STATUS_CONTENT_PARTIAL  206
#define STATUS_MULTI_STATUS     207
#define STATUS_MOVED            301
#define STATUS_FOUND            302
#define STATUS_NOT_MODIFIED     304
#define STATUS_TEMPORARY_REDIRECT 307
#define STATUS_BAD_REQUEST      400
#define STATUS_UNAUTH           401
#define STATUS_FORBIDEN         403
#define STATUS_NOT_FOUND        404
#define STATUS_METH_NOT_ALLOWED 405
#define STATUS_PROXY_UNAUTH     407
#define STATUS_CONFLICT         409
#define STATUS_PRECONDITION     412
#define STATUS_RANGE_NOT_SATISFIABLE 416
#define STATUS_LOCKED           423
#define STATUS_HTTP_TO_HTTPS    497
#define STATUS_SERVER_ERROR     500
#define STATUS_NOT_IMPLEMENT    501
#define STATUS_BAD_GATEWAY      502
#define STATUS_SERVICE_UNAVAILABLE  503
#define STATUS_GATEWAY_TIMEOUT  504



/**
* rq->flags
*/
#define RQ_IF_MATCH_UNMODIFIED  1
#define RQ_IF_TIME             (1<<1)
#define RQ_IF_RANGE_DATE       (1<<2)

#define RQ_HAS_NO_CACHE        (1<<5)

#define RQ_CACHE_HIT           (1<<7)
#define RQ_INPUT_CHUNKED       (1<<8)
#define RQ_NEXT_CALLED         (1<<9)
#define RQ_HAS_ONLY_IF_CACHED  (1<<10)
#define RQ_HAS_AUTHORIZATION   (1<<11)
#define RQ_HAS_PROXY_AUTHORIZATION (1<<12)
#define RQ_HAS_KEEP_CONNECTION (1<<13)
#define RQ_CONNECTION_UPGRADE  (1<<14)
#define RQ_HAS_CONNECTION_UPGRADE  (1<<15)


#define RQ_HAS_CONTENT_LEN     (1<<17)
#define RQ_OBJ_VERIFIED        (1<<18) /* deprecated */

#define RQ_TE_CHUNKED          (1<<20)
#define RQ_TE_COMPRESS         (1<<21)
#define RQ_HAS_SEND_HEADER     (1<<22)
#define RQ_HAS_READ_POST       (1<<23)

#define RQ_POST_UPLOAD         (1<<24)
#define RQ_CONNECTION_CLOSE    (1<<25)
#define RQ_OBJ_STORED          (1<<26) /* deprecated */
#define RQ_HAVE_EXPECT         (1<<27)
#define RQ_HAS_SEND_CHUNK_0    (1<<28)

#define RQ_IS_ERROR_PAGE       (1<<29) /* deprecated */
#define RQ_UPSTREAM            (1<<30) /* deprecated */
#define RQ_UPSTREAM_ERROR      (1<<31) /* deprecated */



///////////////////////////////////////////////
//rq->filter_flag
///////////////////////////////////////////////
#define  RF_TPROXY_UPSTREAM  (1)
#ifdef ENABLE_TPROXY
#define  RF_TPROXY_TRUST_DNS (1<<1)
#endif
#define  RF_PROXY_RAW_URL    (1<<2) /*raw_url */
#define  RF_DOUBLE_CACHE_EXPIRE (1<<3)
#define  RF_UPSTREAM_NOKA    (1<<4)
#define  RF_ALWAYS_ONLINE    (1<<5)
#define  RF_GUEST            (1<<6)
#define  RQ_NO_EXTEND        (1<<7)
#define  RF_X_REAL_IP        (1<<8)
#define  RF_NO_X_FORWARDED_FOR  (1<<9)
#define  RF_LOG_DRILL        (1<<10)
#define  RF_NO_CACHE         (1<<12)
#define  RF_VIA              (1<<13)
#define  RF_X_CACHE          (1<<14)
#define  RF_NO_BUFFER        (1<<15)
#define  RF_NO_DISK_CACHE    (1<<16)
#define  RF_UPSTREAM_NOSNI   (1<<17)
#define  RQ_SEND_AUTH        (1<<18)
#define  RF_PROXY_FULL_URL   (1<<19)
#define  RF_FOLLOWLINK_ALL   (1<<21)
#define  RF_FOLLOWLINK_OWN   (1<<22)
#define  RF_NO_X_SENDFILE    (1<<23)
#define  RQ_URL_QS           (1<<25)
#define  RQ_FULL_PATH_INFO   (1<<26)
#define  RF_AGE              (1<<27)
#define  RQ_RESPONSE_DENY    (1<<29)
#define  RQF_CC_PASS         (1<<30)
#define  RQF_CC_HIT          (1<<31)

#define WORK_MODEL_UNIX      KGL_SERVER_UNIX
#define WORK_MODEL_MANAGE    (1<<1)
#define WORK_MODEL_SSL       (1<<2)
#define WORK_MODEL_TCP       (1<<3)
#define WORK_MODEL_ALT_H3    (1<<4)
#ifdef  ENABLE_PROXY_PROTOCOL
#define WORK_MODEL_PROXY     (1<<5)
//proxy in ssl
#define WORK_MODEL_SSL_PROXY (1<<6)
#endif
#define WORK_MODEL_TPROXY    (1<<7)

#define KGL_SERVER_DYNAMIC   (1<<8)
#define KGL_SERVER_GLOBAL    (1<<9)

#define  NBUFF_SIZE     8192

#define KGL_REQUEST_POOL_SIZE 4096
#define IS_SPACE(a)     isspace((unsigned char)a)
#define IS_DIGIT(a)     isdigit((unsigned char)a)


KBEGIN_DECLS
typedef unsigned short hlen_t;
typedef enum _kgl_header_type
{

	kgl_header_host,
	kgl_header_accept_encoding,
	kgl_header_range,

	kgl_header_server,
	kgl_header_date,
	kgl_header_content_length,
	kgl_header_last_modified,
	kgl_header_etag,
	kgl_header_content_range,
	kgl_header_content_type,
	kgl_header_set_cookie,
	kgl_header_set_cookie2,
	kgl_header_pragma,
	kgl_header_cache_control,
	kgl_header_vary,
	kgl_header_age,
	kgl_header_transfer_encoding,
	kgl_header_content_encoding,
	kgl_header_expires,
	kgl_header_location,
	kgl_header_keep_alive,
	kgl_header_alt_svc,
	kgl_header_connection,
	kgl_header_upgrade,
	kgl_header_expect,
	kgl_header_status,
	kgl_header_if_range,
	kgl_header_if_modified_since,
	kgl_header_if_none_match,
	kgl_header_if_match,
	kgl_header_if_unmodified_since,
	kgl_header_unknow
} kgl_header_type;

#define MAX_HEADER_ATTR_VAL_SIZE 65500
typedef struct _KHttpHeader KHttpHeader;


struct _KHttpHeader
{
	KHttpHeader* next;
	char* buf;
	union
	{
		struct
		{
			union
			{
				struct
				{
					uint8_t name_hash;
					uint8_t name_is_know : 1;
					uint8_t name_is_internal : 1;
				};
				uint16_t name_flags;
			};
			union
			{
				uint16_t name_len;
				uint16_t know_header;
			};
		};
		uint32_t name_attribute;
	};
	union
	{
		struct
		{
			uint16_t val_offset;
			uint16_t val_len;
		};
		uint32_t val_attribute;
	};

};
#define KGL_HEADER_VALUE_INT64 -1
#define KGL_HEADER_VALUE_INT   -2
#define KGL_HEADER_VALUE_TIME  -3

#define KGL_IS_HEADER_RAW_VALUE(val)  (val<0)

typedef enum _KGL_RESULT
{
	KGL_OK = 0,
	KGL_END = 1,
	KGL_NO_BODY = 2,
	KGL_DOUBLICATE = 3,
	KGL_NEXT = 4,
	KGL_EINSUFFICIENT_BUFFER = -1,
	KGL_ENO_DATA = -2,
	KGL_EINVALID_PARAMETER = -3,
	KGL_EINVALID_INDEX = -4,
	KGL_ENOT_READY = -5,
	KGL_EDATA_FORMAT = -6,
	KGL_ENO_MEMORY = -7,
	KGL_EDENIED = -8,
	KGL_EABORT = -9,
	KGL_EHAS_SEND_HEADER = -11,
	KGL_ESOCKET_BROKEN = -20,
	KGL_ECAN_RETRY_SOCKET_BROKEN = -21, // this error should retry with new connection
	KGL_EIO = -22,
	KGL_ENOT_PREPARE = -23,
	KGL_EEXSIT = -24,
	KGL_ESYSCALL = -98,
	KGL_EUNKNOW = -99,
	KGL_ENOT_SUPPORT = -100
} KGL_RESULT;
inline bool is_status_code_no_body(int status_code) {
	if (status_code == 100
		|| status_code == STATUS_NOT_MODIFIED
		|| status_code == STATUS_NO_CONTENT) {
		//no content,see rfc2616.
		return true;
	}
	return false;
}

typedef struct _kgl_request_range
{
	int64_t from;
	int64_t to;
	union
	{
		time_t if_range_date;
		kgl_len_str_t* if_range_entity;
	};
} kgl_request_range;

typedef union _kgl_precondition
{
	time_t time;
	kgl_len_str_t* entity;
} kgl_precondition;

typedef enum
{
	kgl_precondition_if_match_unmodified = (1),
	kgl_precondition_if_time = (1 << 1),
	kgl_precondition_if_none_match = 0,
	kgl_precondition_if_match = 1,
	kgl_precondition_if_modified_since = 2,
	kgl_precondition_if_unmodified_since = 3,
	kgl_precondition_mask = 3,
	kgl_precondition_if_range_date = (1<<2),
} kgl_precondition_flag;

typedef struct _kgl_url
{
#define KGL_URL_SSL       1   /* 根据端口判断是否是ssl */
#define KGL_URL_IPV6      2
#define KGL_URL_REWRITED  8
#define KGL_URL_RANGED    0x10
#define KGL_URL_ENCODE    0x20
#define KGL_URL_ORIG_SSL  0x40  //源建议的ssl


#define KGL_ENCODING_DEFLATE  1
#define KGL_ENCODING_COMPRESS (1<<1)
#define KGL_ENCODING_GZIP     (1<<2)
#define KGL_ENCODING_BR       (1<<3)
#define KGL_ENCODING_UNKNOW   (1<<6)

	char* host;
	char* path;
	char* param;
	volatile uint16_t refs_count;
	uint16_t port;
	union
	{
		uint32_t flag_encoding;
		struct
		{
			uint16_t flags;
			uint8_t  accept_encoding;
			uint8_t  encoding;
		};
	};
} kgl_url;
#define KGL_HTTP_V2_NPN_ADVERTISE        "\x02h2"
#define KGL_HTTP_V3_NPN_ADVERTISE        "\x02h3\x05h3-29"
#define KGL_HTTP_V2_NPN_NEGOTIATED       "h2"

#define KGL_ALPN_HTTP1   0
#define KGL_ALPN_HTTP2   1
#define KGL_ALPN_HTTP3   2

KEND_DECLS
#endif
